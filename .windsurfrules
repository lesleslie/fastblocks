# Windsurf AI Rules for the FastBlocks Project

## 1. Core Principles & Style

- **Adhere to Crackerjack Style Rules**: All code must strictly follow the global "Crackerjack Style Rules" (as referenced by the system memory tag `MEMORY[user_global]`). This includes static typing, modern Python features, PDM usage, pre-commit hooks, etc.
- **Python 3.13+**: Target Python 3.13+ features and syntax.
- **Modularity**: Write small, focused functions and classes.
- **Clarity over Brevity**: Prioritize clear, descriptive names and code.
- **Consistency**: Maintain a uniform style across the entire codebase.

## 2. Technology Stack Specifics

### 2.1. ACB Framework
- **Understand ACB Core**: Before modifying ACB-related components, ensure a thorough understanding of its architecture, especially adapters, template rendering, and caching mechanisms.
- **Leverage Existing Abstractions**: Utilize and extend existing ACB patterns and base classes rather than introducing new, duplicative ones.
- **Mocking ACB**: For testing, use the established mocking framework for ACB components (e.g., `MockAdapter`, `MockTemplateRenderer`, `MockTemplates`, `MockCache`, `MockStorage`, `MockSettings`) as detailed in the system memory tagged `MEMORY[f70bdd4a-ea34-4371-bbcf-ad8cdf546414]`. Ensure tests do not rely on actual filesystem access or external services unless explicitly testing I/O.

### 2.2. Starlette
- **ASGI Best Practices**: Follow ASGI principles for request/response handling, routing, and middleware.
- **Endpoint Design**: Design clear and RESTful API endpoints.
- **Starlette Components**: Utilize Starlette's built-in components (e.g., `Request`, `Response`, `WebSocket`, `Router`) effectively.
- **Async Operations**: Write asynchronous code using `async/await` for all I/O-bound operations within Starlette handlers.

### 2.3. Jinja2
- **Template Logic**: Keep template logic minimal. Complex data manipulation should occur in Python code.
- **Context Variables**: Pass clearly named and structured context variables to templates.
- **Security**: Ensure autoescaping is enabled and be mindful of XSS vulnerabilities. Use `|e` filter only when absolutely necessary and the source is trusted.
- **Macros and Filters**: Utilize Jinja macros and custom filters for reusable template components and data transformations. Follow existing patterns for custom filters (e.g., `MockTemplateFilters`).
- **Template Organization**: Maintain a clear and organized template directory structure.

### 2.4. HTMX
- **Progressive Enhancement**: Use HTMX to enhance server-rendered HTML, not to build a full SPA unless specifically required.
- **HTMX Attributes**: Utilize HTMX attributes (`hx-get`, `hx-post`, `hx-trigger`, `hx-target`, `hx-swap`, etc.) correctly and efficiently.
- **Server-Side Responses**: Design server-side endpoints to return HTML partials suitable for HTMX swapping.
- **Minimize JavaScript**: Prefer HTMX declarative attributes over custom JavaScript where possible.
- **Error Handling**: Implement proper error handling for HTMX requests on both client and server sides.

## 3. Testing
- **Comprehensive Tests**: Write unit and integration tests for all new features and bug fixes using `pytest`.
- **Test Coverage**: Aim for high test coverage, particularly for core logic and adapters. Refer to existing coverage reports (e.g., templates adapter code at 79% for `_base.py`).
- **Independent Tests**: Ensure tests are hermetic and can run in parallel without interference.
- **Mocking**: Adhere strictly to the project's mocking strategy (see 2.1. ACB Framework).
- **`pdm run pytest`**: Always run tests using `pdm run pytest`.

## 4. Development Workflow
- **PDM for Everything**: Use `pdm` for dependency management, running scripts, linters, and formatters (e.g., `pdm run ruff format .`, `pdm run ruff check .`, `pdm run pyright`).
- **Pre-commit Hooks**: Ensure all pre-commit hooks pass before committing code. Run `pdm run pre-commit run --all-files` regularly.
- **Crackerjack Validation**: Code is considered complete only when it passes `python -m crackerjack -x -t` without errors.
- **Code Reviews**: When suggesting changes, provide clear explanations and context. Be prepared to discuss alternatives.

## 5. AI Collaboration
- **Contextual Awareness**: Pay close attention to existing code patterns, project structure, and previous discussions/memories.
- **Proactive Suggestions**: Offer suggestions aligned with the project's architecture and technology stack (e.g., suggest HTMX for dynamic UI, or a new Starlette middleware for a cross-cutting concern).
- **Incremental Changes**: Prefer smaller, incremental changes that are easier to review and test.
- **Documentation**: Update or add documentation for new features or significant changes, focusing on the "why" rather than the "what".

## 6. File and Project Structure
- **Follow Existing Layout**: Adhere to the established project structure for `fastblocks`, `tests`, `adapters`, etc.
- **Pathlib**: Use `pathlib.Path` for all filesystem path manipulations.
- **Configuration**: Store project configuration in `pyproject.toml` where appropriate.

## 7. Security
- **Input Validation**: Validate all user inputs on the server-side (Starlette).
- **Output Encoding**: Ensure proper output encoding, especially in Jinja templates, to prevent XSS.
- **Dependency Security**: Keep dependencies updated and be aware of potential vulnerabilities. Use `pdm update` and review changes.

---
This set of rules aims to guide AI assistants in contributing effectively and consistently to the FastBlocks project, leveraging its specific technology stack and adhering to established quality standards.
